// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model  AcademicSemester {
  id         String     @id @default(uuid())
  year       Int
  title      String
  code       String
  startMonth String
  endMonth   String
  isCurrent  Boolean?   @default(false)
  createAt   DateTime   @default(now())
  updateAt   DateTime   @updatedAt
  students   Student[]
  semesterRegistrations SemesterRegistration[]
    studentEnrollCourses  StudentEnrollCourse []

  @@map("academic_semesters")

}

model AcademicFaculty {
  id                   String               @id @default(uuid())
  title                String
  createAt             DateTime             @default(now())
  updateAt             DateTime             @updatedAt
  academicDepartments  AcademicDepartment[]
  students             Student[]
  faculties            Faculty[]

  @@map("academic_faculty")
  
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createAt          DateTime        @default(now())
  updateAt          DateTime        @updatedAt

  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  students          Student[]
  faculties         Faculty[]
  offeredCourses  OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id                   String   @id @default(uuid())
  studentId            String
  firstName            String
  lastName             String
  middleName           String
  profileImage         String
  email                String
  contactNo            String
  gender               String
  bloodGroup           String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId   String

  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String

  studentSemesterRegistrations StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
    studentEnrollCourses  StudentEnrollCourse []

  @@map("students")
}

model Faculty {
  id                    String   @id @default(uuid())
  facultyId             String
  firstName             String
  lastName              String
  middleName            String
  profileImage          String
  email                 String
  contactNo             String
  gender                String
  bloodGroup            String
  designation           String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId  String

  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId     String
  courses              CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id            String      @id @default(uuid())
  title         String
  createAt      DateTime    @default(now())
  updateAt      DateTime    @updatedAt
  rooms          Room[]

  @@map("buildings")
}

model Room {
  id             String      @id @default(uuid())
  roomNumber     String
  floor          String
  createAt       DateTime    @default(now())
  updateAt       DateTime    @updatedAt

  building Building @relation(fields: [buildingId], references: [id])
  buildingId     String

  offeredCourseClassSchedules OfferedCourseClassSchedule[]

@@map("rooms")
}

model Course {
  id              String        @id @default(uuid())
  title           String
  code            String
  credits         Int           @default(0)
  createAt        DateTime      @default(now())
  updateAt        DateTime      @updatedAt

  // relation 2 ta same smae tai ay vabe kora hoyese
  preRequisite    CourseToPrerequisite[] @relation("CourseToPrerequisite") // courseId
  PreRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse") // prerequisiteId
  faculties       CourseFaculty[]
  offeredCourses  OfferedCourse[]
  studentEnrollCourses  StudentEnrollCourse []

  @@map("courses")
}

model CourseToPrerequisite {

  course Course @relation(fields: [courseId], references: [id],name: "CourseToPrerequisite")
  courseId         String

  prerequisite Course @relation(fields: [prerequisiteId], references: [id], name: "PrerequisiteToCourse")
  prerequisiteId   String

  @@id([courseId, prerequisiteId]) // ekhne kno pk id nai (courseId, prerequisiteId) pk id tai ei vabe dite hobe

}

model CourseFaculty {
  course Course @relation(fields: [courseId], references: [id])
  courseId   String

  faculty Faculty @relation(fields: [facultyId], references: [id])
  facultyId  String

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                          String                      @id @default(uuid())
  startDate                   DateTime
  endDate                     DateTime
  status                      SemesterRegistrationStatus? @default(UPCOMING)
  minCredit                   Int                         @default(0)
  maxCredit                   Int                         @default(0)
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt

  academicSemester AcademicSemester  @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId          String
  offeredCourses              OfferedCourse[]
  offeredCourseSections       OfferedCourseSection[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
  studentSemesterRegistrations StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("semester_registrations")
}


model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id])
  courseId  String

  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  semesterRegistration SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  semesterRegistrationId String
  offeredCourseSections  OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String        @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int           @default(0)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt

  offeredCourse OfferedCourse @relation(fields: [offeredCourseId], references: [id])
  offeredCourseId          String

  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  semesterRegistrationId   String

  offeredCourseClassSchedules  OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]


  @@map("offered_course_sections")
}

model OfferedCourseClassSchedule{
  id                       String    @id @default(uuid())
  startTime                String
  endTime                  String
  dayOfWeek                WeekDays  @default(SARETDAY)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  offeredCourseSection OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  offeredCourseSectionId   String

  semesterRegistration  SemesterRegistration @relation(fields: [ semesterRegistrationId], references: [id])
  semesterRegistrationId   String

  room  Room @relation(fields: [ roomId], references: [id])
  roomId                   String

  faculty  Faculty @relation(fields: [ facultyId], references: [id])
  facultyId                String


  @@map("offered_course_class_schedules")
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirmed            Boolean?             @default(false)
  totalCreditsTaken      Int?                 @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  student                Student              @relation(fields: [studentId], references: [id])
  studentId              String

  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  semesterRegistrationId String

  @@map("student_semester_registrations")
}


//enrollIntoCourse
model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  offeredCourseId        String
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId]) // এইখানে offeredCourseSection দেয়া হয় নাই কারণ  
  @@map("student_semester_registration_courses")
}

// এইখানে offeredCourseSection দেয়া হয় নাই কারণ  
//  semesterRegistration id: a   ---- autum
//  studentId: b                 ---- Borna
//  offeredCourseId : c          ---  Math
// offeredCourseSectionId: d / e ---  A/B  -- তাহলে একজন student এক subject(Math) ২ সেকশন এ নিবে এটা একটা প্রব্লেম তাই offeredCourseSectionId নেয়া হয় নাই 
// abcd
// abce
model StudentEnrollCourse {
  id                     String                      @id @default(uuid())
  createdAt              DateTime                    @default(now())
  updatedAt              DateTime                    @updatedAt

  student Student @relation(fields: [studentId], references: [id])
  studentId              String

  course Course @relation(fields: [courseId], references: [id])
  courseId               String

  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId     String

  grade                  String?
  point                  Float?                      @default(0)
  totalMarks             Int?                        @default(0)
  status                 StudentEnrollCourseStatus   @default(ONGOING)


  @@map("student_enroll_course")
}


enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum WeekDays {
  SARETDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum StudentEnrollCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}